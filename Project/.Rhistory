submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
packageVersion('dplyr')
bind_rows(passed,failed)
sat
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute()
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19-20-12")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, now())
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
update(depart, hours = 17, minutes = 34, seconds = 0)
depart <- update(depart, hours = 17, minutes = 34, seconds = 0)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone= "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_variable(last_time, arrive)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
quit()
set.seed(13435)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
X
X[,1]
X[,"var1"]
X[1:2,"var2"]
X[1:2,2]
X[1:3,2:3]
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 | X$var3 > 15),]
X[which(X$var2 > 8)]
X[which(X$var2 > 8),]
sort(X$var1)
sort(X$var1, decreasing = TRUE)
sort(X$var2, na.last = TRUE)
X[order(X$var1,X$var$3),]
X[order(X$var1,X$var3),]
X[order(X$var1),]
library(pylr)
library(plyr)
arrange(X,var1)
arrange(X,desc(var1))
X$var4 <- rnorm(5)
X
Y <- cbind(X,rnorm(5))
Y
ls()
rm(list=ls())
ls()
if(!file.exist("GettingData")){
dir.create("GettingData")
}
if(!file.exists("GettingData")){
dir.create("GettingData")
}
dir()
if(!file.exists("Restaurant")){
dir.create("Restaurant")
}
fileUrl <- "https://data.baltimorecity.gov/api/views/K5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./Restaurant/restaurants.csv", method = "curl")
restData <-read.csv("./Restaurant/restaurants.csv")
restData
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./Restaurant/restaurants.csv", method = "curl")
restData <-read.csv("./Restaurant/restaurants.csv")
restData
if(!file.exists("./test")){
dir.create("./test")
}
head(restData, n=3)
tail(restData, n=3)
summary(restData)
str(restData)
quantile(restData$councilDistrict, na.rm = TRUE)
quantile(restData$councilDistrict, probs=c(0.5,0.75,0.9))
table(restData$zipCode, useNA="ifany")
table(restData$councilDistrict, restData$zipCode)
sum(is.na(restData$councilDistrict))
any(is.na(restData$councilDistrict))
all(restData$zipCode > 0)
colSums(is.na(restData))
all(colSums(is.na(restData))==0)
table(restData$zipCode %in% c("21212"))
table(restData$zipCode %in% c("21212","21213"))
restData[restData$zipCode %in% c("21212","21213"),]
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
warpbreaks$replicate <- rep(1:9, len = 54)
xt = xtabs(braks~., data = warpbreaks)
xt = xtabs(breaks~., data = warpbreaks)
xt
ftable(xt)
fakeData = rnorm(1e5)
object.size(fakeData)
print(object.size(fakeData),units = "Mb")
quit()
restData <-read.csv("./Restaurant/restaurants.csv")
s1 <- seq(1,10, by = 2) ; s1
s2 <- seq(1,10, length = 3) ; s2
x <- c(1,3,8,25,100); seq(along = x)
restData$nearMe = restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearMe)
restData$zipWrong = ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong, restData$zipCode < 0)
restData$zipGroups = cut(restData$zipCode, breaks=quantile(restData$zipCode))
table(restData$zipGroups)
table(restData$zipGroups, restData$zipCode)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
restData$zipGroups = cut2(restData$zipCode,g=4)
table(restData$zipGroups)
restData$zcf <- factor(restData$zipCode)
restData$zcf[1:10]
class(restData$zcf)
yesno <- sample(c("yes", "no"), size=10, replace=TRUE)
yesnofac <- factor(yesno,levels=c("yes", "no"))
relevel(yesnofac, ref= "yes")
as.numeric(yesnofac)
library(plyr)
restData2 = mutate(restData, zipGroups=cut2(zipCode,g=4))
table(restData2$zipGroups)
quit()
install.packages("reshape2")
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id = c("carname", "gear", "cyl"), measure.vars=c("mpg","hp"))
head(carMelt, n=3)
tail(carMelt, n=3)
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray,sum)
spIns = split(InsectSprays$count,InsectSprays$spray)
spIns
sprCount = lapply(spIns,sum) ; sprCount
unlist(sprCount)
sapply(spIns,sum)
library(plyr)
ddply(InsectSprays,.(spray), summarize, sum=sum(count))
spraySums <- ddply(InsectSprays,(spray), summarize, sum=ave(count, FUN=sum))
spraySums <- ddply(InsectSprays,.(spray), summarize, sum=ave(count, FUN=sum))
dim(spraySums)
head(spraySums)
library(dplyr)
chicago <- readRDS("chicago.rds")
chicago <- readRDS("chicago.rds")
dim(chicago)
head(select(chicago, 1:5))
names(chicago)
head(select(chicago, city:dptp))
head(select(chicago, -city:dptp))
head(select(chicago, -(city:dptp))
)
i <- match("city", names(chicago))
j <- match("dptp", names(chicago))
head(chicago[,-(i:j)])
chic.f <- filter(chicago, pm25tmean2 >30)
head(chic.f, 10)
chic.f <- filter(chicago, pm25tmean2 >30 & tmp >80)
chic.f <- filter(chicago, pm25tmean2 >30 & tmpd >80)
head(chic.f, 10)
chicago <- arrange(chicago,date)
head(chicago)
tail(chicago)
chicago <- rename(chicago, pm25 = pm25tmean2, dewpoint = dptp)
tail(chicago)
head(chicago)
chicago <- mutate(chicago, pm25detrend = pm25-mean(pm25, na.rm = TRUE))
head(select(chicago, pm25, pm25detrend))
head(chicago)
library(Rcpp)
chicago <- mutate(chicago, pm25detrend = pm25-mean(pm25, na.rm = TRUE))
head(select(chicago, pm25, pm25detrend))
tail(select(chicago, pm25, pm25detrend))
chicago <- arrange(chicago,desc(date))
chicago <- rename(chicago, pm25 = pm25tmean2, dewpoint = dptp)
chicago <- mutate(chicago, pm25detrend = pm25-mean(pm25, na.rm = TRUE))
head(select(chicago, pm25, pm25detrend))
chicago <- mutate(chicago,
tempcat = factor(1 * (tmpd > 80),
labels = c("cold", "hot")))
hotcold <- group_by(chicago, tempcat)
summarize(hotcold, pm25 = mean(pm25, na.rm = TRUE),          o3 = max(o3tmean2),          no2 = median(no2tmean2))
summarize(hotcold, pm25 = mean(pm25, na.rm = TRUE),
o3 = max(o3tmean2),
no2 = median(no2tmean2))
hotcold
chicago <- mutate(chicago,
year = as.POSIXlt(date)$year + 1900)
years <- group_by(chicago, year)
summarize(years, pm25 = mean(pm25, na.rm = TRUE),
o3 = max(o3tmean2, na.rm = TRUE),
no2 = median(no2tmean2, na.rm = TRUE))
chicago %>% mutate(month = as.POSIXlt(date)$mon + 1)%>% group_by(month)%>% summarize(pm25 = mean(pm25, na.rm = TRUE),              o3 = max(o3tmean2, na.rm = TRUE),              no2 = median(no2tmean2, na.rm = TRUE))
chicago %>% mutate(month = as.POSIXlt(date)$mon + 1)
%>% group_by(month)
%>% summarize(pm25 = mean(pm25, na.rm = TRUE),
o3 = max(o3tmean2, na.rm = TRUE),
no2 = median(no2tmean2, na.rm = TRUE))
chicago %>%
mutate(month = as.POSIXlt(date)$mon + 1) %>%
group_by(month) %>%
summarize(pm25 = mean(pm25, na.rm = TRUE),
o3 = max(o3tmean2, na.rm = TRUE),
no2 = median(no2tmean2, na.rm = TRUE))
rm(lists=ls())
rm(list=ls())
if(!file.exists("./PeerReview")){
dir.create("./PeerReview")
}
dir()
fileUrl1 <- "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <- "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1, destfile = "./PeerReview/reviews.csv", method = "curl")
download.file(fileUrl2, destfile = "./PeerReview/solutions.csv", method = "curl")
reviews = read.csv("./PeerReview/reviews.csv"); solutions <- read.csv("./PeerReview/solutions.csv")
head(reviews,2)
head(solutions,2)
names(solutions)
names(reviews)
mergedData - merge(reviews, solutions, by.x="solution_id", by.y="id", all = TRUE)
mergedData = merge(reviews, solutions, by.x="solution_id", by.y="id", all = TRUE)
head(mergedData)
intersect(names(solutions), names(reviews))
mergedData2 = merge(reviews, solutions, all = TRUE)
head(mergedData2)
head(mergedData)
df1 = data.frame(id=sample(1:10), x = rnorm(10))
df2 = data.frame(id=sample(1:10), y = rnorm(10))
arrange(join(df1,df2),id)
df3 = data.frame(id=sample(1:10), z = rnorm(10))
dfList = list(df1, df2, df3)
join_all(dfList)
arrange(join_all(dfList),id)
quit()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url, destfile = "ACSData2006.csv", method = "curl")
acs <- read.csv("ACSData2006.csv")
head(acs)
str(acs)
## ACR => Lot size = 3 - House on 10 or more acres
agricultureLogical <- acs[(acs$ACR ==3 & acs$AGS ==6),]
head(agricultureLogical)
agricultureLogical <- acs[(acs$ACR =3 & acs$AGS =6),]
agricultureLogical <- acs[(acs$ACR >=3 & acs$AGS >=6),]
head(agricultureLogical)
tail(agricultureLogical)
which(agricultureLogical)
agricultureLogical <- acs[(acs$ACR >2 & acs$AGS >5),]
tail(agricultureLogical)
which(agricultureLogical)[1:3]
agricultureLogical <- acs[which(acs$ACR >2 & acs$AGS >5),]
which(agricultureLogical)[1:3]
tail(agricultureLogical)
head(agricultureLogical)
which(agricultureLogical)[1:3]
which(agricultureLogical)
agricultureLogical <- acs(acs$ACR ==3 & acs$AGS ==6)
agricultureLogical <- acs$ACR ==3 & acs$AGS ==6
which(agricultureLogical)[1:3]
which(agricultureLogical)
install.packages("jpeg")
library(jpeg)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(url, destfile = "jeff.jpeg", mode = "wb")
download.file(url, destfile = "jeff.jpeg", method = "curl", mode = "wb")
img <- readjpeg("jeff.jpeg", native = TRUE )
img <- readJPEG("jeff.jpeg", native = TRUE )
quantile(img, probs=c(0.3, 0.8))
url1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
url2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(url1, destfile = "GDPdata.csv", method = "curl")
download.file(url2, destfile = "EDUdata.csv", method = "curl")
gdpData <-read.csv("GDPdata.csv")
eduData <-read.csv("EDUdata.csv")
names(gdpData)
names(eduData)
head(gdpData)
gdpData <- rename(gdpData, X = CountryCode)
library(dplyr)
gdpData <- rename(gdpData, X = CountryCode)
gdpData <- rename(gdpData, CountryCode = X)
head(gdpData)
head(eduData)
head(gdpData)
gdpData <- arrange(gdpData, desc(Ranking))
head(gdpData)
head(gdpData)
gdpData <-read.csv("GDPdata.csv", skip =4)
head(gdpData)
gdpData <- rename(gdpData, CountryCode = X, Ranking = X.1)
gdpData <- rename(gdpData, CountryCode = X, Ranking = X.1, na.rm=TRUE)
gdpData <- arrange(gdpData, desc(Ranking)
)
head(gdpData)
gdpData <-read.csv("GDPdata.csv", skip =4, nrows = 215)
head(gdpData)
gdpData <- rename(gdpData, CountryCode = X, Ranking = X.1, CountryName = X.3, GDP = X.4)
head(gdpData)
tail(gdpData)
gdpData <- select(gdpData, na.rm=TRUE)
Data <- merge(gdpData,eduData, all=TRUE, by=c("CountryCode"))
head(Data)
sum(!is.na(unique(Data$Ranking)))
eduData <- rename(eduData, CountryName = Long Name)
head(eduData)
eduData <- rename(eduData, CountryName = Long.Name)
Data <- merge(gdpData,eduData, all=TRUE, by=c("CountryCode"))
sum(!is.na(unique(Data$Ranking)))
head(Data)
Data <- arrange(Data, desc(Ranking))
head(Data)
tail(Data)
rm=(list=ls())
quit()
gdpData <-read.csv("GDPdata.csv", skip =4, nrows = 191)
eduData <-read.csv("EDUdata.csv")
library(dplyr)
head(gdpData)
tail(gdpData)
gdpData <-read.csv("GDPdata.csv", skip =4, nrows = 190)
tail(gdpData)
gdpData <- rename(gdpData, CountryCode = X, Ranking = X.1, CountryName = X.3, GDP = X.4)
eduData <- rename(eduData, CountryName = Long.Name)
mergedData <- merge(gdpData,eduData, all=TRUE, by=c("CountryCode"))
sum(!is.na(unique(mergedData$Ranking)))
head(mergedData)
tail(mergedData)
mergedData <- arrange(mergedData, desc(Ranking))
tail(mergedData)
head(mergedData)
mergedData[order(Ranking, decreasing=TRUE), list(CountryCode, CountryName, Ranking)][13]
names(mergedData)
mergedData <- merge(gdpData,eduData, all=TRUE, by=c("CountryCode", "CountryName"))
sum(!is.na(unique(mergedData$Ranking)))
mergedData[order(Ranking, decreasing=TRUE), list(CountryCode, CountryName, Ranking)][13]
names(mergedData)
mergedData[order(Ranking, decreasing=TRUE)][13]
head(mergedData)
mergedData <- arrange(mergedData, desc(Ranking))
head(mergedData)
tail(mergedData)
mergedData <- filter(mergedData, !is.na(Ranking))
head(mergedData)
mergedData <- arrange(mergedData, desc(Ranking))
head(mergedData, 13)
tail(mergedData, 13)
sum(!is.na(unique(mergedData$Ranking)))
summary(mergedData)
mergedData[order(Ranking,decreasing =TRUE), list(CountryCode, CountryName, Ranking)]
summarize(mergedData)
head(select(CountryCode, CountryName, Ranking,15 ))
head(select(CountryCode, CountryName, Ranking,),15)
head(select(mergedData,CountryCode, CountryName, Ranking,),15)
head(select(mergedData,CountryCode, CountryName, Ranking),15)
head(select(mergedData,CountryCode, CountryName, Ranking),10-13)
tail(select(mergedData,CountryCode, CountryName, Ranking))
mergedData <- merge(gdpData,eduData, all=TRUE, by=c("CountryCode"))
sum(!is.na(unique(mergedData$Ranking)))
mergedData <- filter(mergedData, !is.na(Ranking))
mergedData <- arrange(mergedData, desc(Ranking))
head(select(mergedData,CountryCode, CountryName, Ranking),13)
mergedData <- merge(gdpData,eduData, all=TRUE, by=c("CountryCode", "CountryName"))
mergedData <- filter(mergedData, !is.na(Ranking))
head(mergedData)
tail(mergedData)
mergedData <- merge(gdpData,eduData, all=TRUE, by=c("CountryCode", "CountryName"))
sum(!is.na(unique(mergedData$Ranking)))
mergedData <- filter(mergedData, !is.na(Ranking))
mergedData <- arrange(mergedData, desc(Ranking))
head(mergedData, 13)
tail(mergedData)
highOECD <- filter(mergedData, Income.Group = "High income: OECD")
highOECD <- filter(mergedData, Income.Group == "High income: OECD")
head(highOECD)
sumarize(highOECD, mean_Rank = mean(Ranking))
summarize(highOECD, mean_Rank = mean(Ranking))
mean(mergedData[mergedData$Income.Group = "High income: OECD",]$Ranking)
mean(mergedData[mergedData$Income.Group == "High income: OECD",]$Ranking)
income <- filter(mergedData, !is.na(Income.Group))
head(income)
hOECD <- filter(income, Income.Group == "High income: OECD")
summarize(hOECD, mean_Rank = mean(Ranking))
hOECD
income <- select(mergedData,CountryCode, CountryName, Ranking, Income.Group)
income
income
head(eduData)
mergedData <- merge(gdpData,eduData, all=TRUE, by=c("CountryCode"))
income <- select(mergedData,CountryCode, CountryName.y, Ranking, Income.Group)
income
head(select(mergedData,CountryCode, CountryName.y, CountryName.x, Ranking),13)
sum(!is.na(unique(mergedData$Ranking)))
mergedData <- filter(mergedData, !is.na(Ranking))
mergedData <- arrange(mergedData, desc(Ranking))
head(mergedData, 13)
head(select(mergedData,CountryCode, CountryName.y, CountryName.x, Ranking),13)
income <- select(mergedData,CountryCode, CountryName.x, Ranking, Income.Group)
income
mean(income[income$Income.Group =="High income: OECD",]$Ranking)
hOECD <- filter(income, Income.Group =="High income: OECD")
summarize(hOECD, meanRank = mean(Ranking))
hnOECD <- filter(income, Income.Group =="High income: nonOECD")
summarize(hnOECD, meanRank = mean(Ranking))
quantile(income$Ranking, probs=c(0.2,0.4, 0.6, 0.8,1.0))
library(Hmisc)
income$RankingGroups = cut2(income$Ranking, g=5)
table(income$RankingGroups)
table(income$RankingGroups, income$Income.Group)
quit()
library(reshape2)
library(dplyr)
library(data.table)
write.table(tidy_data, file = "./tidy_data.txt")
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/run_analysis.R')
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/run_analysis.R')
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/run_analysis.R')
source('~/.active-rstudio-document')
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/run_analysis.R')
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/run_analysis.R')
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/run_analysis.R')
getwd()
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/run_analysis.R')
head(tidy_data)
cLabels <- colnames(tidy_data)
cLabels
cLabels <- gsub("\\.+mean\\.+", cLabels, replacement = "Mean")
cLabels
cLabels <- gsub("\\.+std\\.+", cLabels, replacement = "SD")
cLabels
colnames(tidy_data) <- cLabels
tidy_data
cLabels <- gsub("\\std\\", cLabels, replacement = "SD")
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/run_analysis.R')
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/run_analysis.R')
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/run_analysis.R')
quit()
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/run_analysis.R')
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/run_analysis.R')
activity_labels
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")
activity_labels
extract_features
id_labels
colnames(data)
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/run_analysis.R')
X_train
cleanNames = gsub("\\(|\\)|‐|,", "", names(tidy_data))
cleanNames
names(tidy_data)
cleanNames
names(tidy_data) = cleanNames
names(tidy_data)
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/run_analysis.R')
quit()
setwd("~/Desktop/Courses/Coding/Getting_Cleaning_Data/GCD-Project")
source('~/Desktop/Courses/Coding/Getting_Cleaning_Data/GCD-Project/run_analysis.R')
quit()
